[{"D:\\react\\bilibili\\src\\index.tsx":"1","D:\\react\\bilibili\\src\\pages\\Search\\index.tsx":"2","D:\\react\\bilibili\\src\\store\\index.ts":"3","D:\\react\\bilibili\\src\\pages\\Index\\index.tsx":"4","D:\\react\\bilibili\\src\\pages\\Space\\index.tsx":"5","D:\\react\\bilibili\\src\\pages\\Channel\\index.tsx":"6","D:\\react\\bilibili\\src\\pages\\LivesArea\\index.tsx":"7","D:\\react\\bilibili\\src\\store\\reducers.ts":"8","D:\\react\\bilibili\\src\\components\\Swiper\\index.tsx":"9","D:\\react\\bilibili\\src\\components\\VideoPlayer\\index.tsx":"10","D:\\react\\bilibili\\src\\components\\LiveTypes\\index.tsx":"11","D:\\react\\bilibili\\src\\components\\Avatar.tsx":"12","D:\\react\\bilibili\\src\\components\\Comments\\index.tsx":"13","D:\\react\\bilibili\\src\\pages\\LiveRoom\\ChatWS.ts":"14","D:\\react\\bilibili\\src\\api\\index.ts":"15","D:\\react\\bilibili\\src\\pages\\LiveRoom\\index.tsx":"16","D:\\react\\bilibili\\src\\App.tsx":"17","D:\\react\\bilibili\\src\\components\\Logo.tsx":"18","D:\\react\\bilibili\\src\\components\\Recommend\\index.tsx":"19","D:\\react\\bilibili\\src\\components\\Header\\index.tsx":"20","D:\\react\\bilibili\\src\\components\\PlayerDetail\\index.tsx":"21","D:\\react\\bilibili\\src\\api\\axios.ts":"22","D:\\react\\bilibili\\src\\components\\ChatList\\index.tsx":"23","D:\\react\\bilibili\\src\\pages\\Live\\index.tsx":"24","D:\\react\\bilibili\\src\\pages\\My\\index.tsx":"25","D:\\react\\bilibili\\src\\store\\actions.ts":"26","D:\\react\\bilibili\\src\\components\\MenuBar\\index.tsx":"27","D:\\react\\bilibili\\src\\util\\index.ts":"28","D:\\react\\bilibili\\src\\pages\\Video\\index.tsx":"29","D:\\react\\bilibili\\src\\components\\ChannelList\\index.tsx":"30"},{"size":221,"mtime":1609244241164,"results":"31","hashOfConfig":"32"},{"size":3278,"mtime":1609434376479,"results":"33","hashOfConfig":"32"},{"size":256,"mtime":1609325772460,"results":"34","hashOfConfig":"32"},{"size":1348,"mtime":1609946953636,"results":"35","hashOfConfig":"32"},{"size":2529,"mtime":1609576230514,"results":"36","hashOfConfig":"32"},{"size":1168,"mtime":1609947428656,"results":"37","hashOfConfig":"32"},{"size":1597,"mtime":1609590847825,"results":"38","hashOfConfig":"32"},{"size":3551,"mtime":1609771123044,"results":"39","hashOfConfig":"32"},{"size":1219,"mtime":1609937798701,"results":"40","hashOfConfig":"32"},{"size":8671,"mtime":1609942757135,"results":"41","hashOfConfig":"32"},{"size":1410,"mtime":1609587250475,"results":"42","hashOfConfig":"32"},{"size":1978,"mtime":1609690833486,"results":"43","hashOfConfig":"32"},{"size":1152,"mtime":1609779764377,"results":"44","hashOfConfig":"32"},{"size":7550,"mtime":1609854452958,"results":"45","hashOfConfig":"32"},{"size":1759,"mtime":1609848112012,"results":"46","hashOfConfig":"32"},{"size":4133,"mtime":1609930521120,"results":"47","hashOfConfig":"32"},{"size":1304,"mtime":1609580608338,"results":"48","hashOfConfig":"32"},{"size":7774,"mtime":1609247415108,"results":"49","hashOfConfig":"32"},{"size":627,"mtime":1609841967902,"results":"50","hashOfConfig":"32"},{"size":669,"mtime":1609565612204,"results":"51","hashOfConfig":"32"},{"size":4767,"mtime":1609773965756,"results":"52","hashOfConfig":"32"},{"size":746,"mtime":1609592456696,"results":"53","hashOfConfig":"32"},{"size":1585,"mtime":1609944034402,"results":"54","hashOfConfig":"32"},{"size":1194,"mtime":1609500183678,"results":"55","hashOfConfig":"32"},{"size":2064,"mtime":1609483345357,"results":"56","hashOfConfig":"32"},{"size":5711,"mtime":1609771616780,"results":"57","hashOfConfig":"32"},{"size":2770,"mtime":1609587215987,"results":"58","hashOfConfig":"32"},{"size":1729,"mtime":1609833575145,"results":"59","hashOfConfig":"32"},{"size":2418,"mtime":1609773175471,"results":"60","hashOfConfig":"32"},{"size":1141,"mtime":1609946717747,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"x6upha",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"112"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"64"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"64"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"64"},"D:\\react\\bilibili\\src\\index.tsx",[],["138","139"],"D:\\react\\bilibili\\src\\pages\\Search\\index.tsx",[],"D:\\react\\bilibili\\src\\store\\index.ts",[],["140","141"],"D:\\react\\bilibili\\src\\pages\\Index\\index.tsx",["142"],"import React, { useEffect} from 'react'\r\nimport * as actionTypes from '../../store/actions';\r\nimport Header from '../../components/Header'\r\nimport Swiper from '../../components/Swiper/index'\r\nimport './style.styl'\r\nimport { connect } from \"react-redux\";\r\nimport Recommend from '../../components/Recommend'\r\nimport MenuBar from '../../components/MenuBar'\r\n\r\nconst Index = (props) => {\r\n  const { getBannerListDispatch, banners, recommendList, getRecommendListDispatch } = props\r\n  useEffect(() => {\r\n    if (!banners) {\r\n      getBannerListDispatch()\r\n    }\r\n    if (!recommendList.length) {\r\n      getRecommendListDispatch()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className='container'>\r\n      <Header />\r\n      <MenuBar  history={props.history} chooseId={0} />\r\n      <div className='swiper_container'>\r\n        <Swiper bannerList={banners} />\r\n      </div>\r\n      <div className='recommend'>\r\n        <Recommend recommendList={recommendList}   />\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default connect(\r\n  function mapStateToProps(state) {\r\n    return state;\r\n  },\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getBannerListDispatch() {\r\n        dispatch(actionTypes.getBannerList())\r\n      },\r\n      getRecommendListDispatch() {\r\n        dispatch(actionTypes.getRecommendList())\r\n      },\r\n    };\r\n  }\r\n)(Index);\r\n","D:\\react\\bilibili\\src\\pages\\Space\\index.tsx",["143","144"],"import React, { useEffect, useState } from 'react'\r\nimport Header from '../../components/Header'\r\nimport './style.styl'\r\nimport * as actionTypes from '../../store/actions';\r\nimport { connect } from \"react-redux\";\r\nimport{tenThousand} from '../../util'\r\n\r\nconst Space = (props) => {\r\n  const {upInfo,getUpInfoDispatch} = props\r\n  const [choiceVideo, setChoiceVideo] = useState(false)\r\n  const mid = props.location.search.match(/\\d+/)\r\n\r\n  useEffect(()=>{\r\n    getUpInfoDispatch(mid)\r\n  },[])\r\n\r\n  return (\r\n    <div className='container'>\r\n      <Header />\r\n      <div>\r\n        <div className='banner'>\r\n          <img src=\"http://s1.hdslb.com/bfs/static/jinkela/mstation-h5/assets/bannerTop_new.png\" alt=\"\" />\r\n        </div>\r\n        <div className='userInfo'>\r\n          <img src={upInfo.face} alt=\"\" />\r\n          <div className='fansInfo'>\r\n            <div className='fans'>\r\n              <div className='item'>\r\n                <div className='number'>666</div>\r\n                <div className='type'>粉丝</div>\r\n              </div>\r\n              <div className='columLine'></div>\r\n              <div className='item'>\r\n                <div className='number'>35</div>\r\n                <div className='type'>关注</div>\r\n              </div>\r\n              <div className='columLine'></div>\r\n              <div className='item'>\r\n                <div className='number'>4532</div>\r\n                <div className='type'>获赞</div>\r\n              </div>\r\n            </div>\r\n            <div className='editInfo'>编辑资料</div>\r\n          </div>\r\n        </div>\r\n        <div className='username'>\r\n          {upInfo.name}\r\n        </div>\r\n        <div className='userAbout'>{upInfo.sign}</div>\r\n        <div className='tabBar'>\r\n          <div> <span className={choiceVideo ? ' ' : 'active'} onClick={()=>setChoiceVideo(false)}>动态</span></div>\r\n          <div><span className={choiceVideo ? 'active' : ''} onClick={()=>setChoiceVideo(true)}>视频</span></div>\r\n        </div>\r\n        <div className='content'>\r\n            <img src=\"http://s1.hdslb.com/bfs/static/jinkela/mstation-h5/assets/noContent.png\" alt=\"\"/>\r\n            <div className='sleep'>小哔睡着了~</div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(\r\n  function mapStateToProps(state) {\r\n    return state;\r\n  },\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getUpInfoDispatch(props) {\r\n        dispatch(actionTypes.fetchUpInfo(props))\r\n      },\r\n     \r\n    };\r\n  }\r\n)(Space);\r\n","D:\\react\\bilibili\\src\\pages\\Channel\\index.tsx",["145","146"],"import React, { useEffect } from 'react'\r\nimport * as actionTypes from '../../store/actions';\r\nimport Header from '../../components/Header'\r\n\r\nimport './style.styl'\r\nimport { connect } from \"react-redux\";\r\n\r\nimport MenuBar from '../../components/MenuBar'\r\nimport ChannelList from '../../components/ChannelList'\r\nimport ChatList from '../../components/ChatList';\r\n\r\nconst Channel = (props) => {\r\n  const { location, region, getRegionDispatch,history } = props\r\n  const rid = location.search.match(/\\d+/)\r\n\r\n  useEffect(() => {\r\n    console.log(321)\r\n    getRegionDispatch(rid)\r\n  }, [])\r\n\r\nconst fetchData = (props) =>{\r\n  console.log(props)\r\n  getRegionDispatch(rid)\r\n}\r\n\r\n  return (\r\n    <div className='container'>\r\n      <Header  />\r\n      <MenuBar history={history}  chooseId={Number(rid)} fetchData={fetchData} />\r\n      <ChannelList  region={region} history={history} />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default connect(\r\n  function mapStateToProps(state) {\r\n    return state;\r\n  },\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getRegionDispatch(props) {\r\n        dispatch(actionTypes.fetchRegion(props))\r\n      },\r\n    };\r\n  }\r\n)(Channel);\r\n","D:\\react\\bilibili\\src\\pages\\LivesArea\\index.tsx",[],"D:\\react\\bilibili\\src\\store\\reducers.ts",[],["147","148"],"D:\\react\\bilibili\\src\\components\\Swiper\\index.tsx",["149"],"D:\\react\\bilibili\\src\\components\\VideoPlayer\\index.tsx",["150","151","152","153","154","155","156","157","158","159","160"],"D:\\react\\bilibili\\src\\components\\LiveTypes\\index.tsx",["161"],"import React from 'react'\r\nimport './style.styl'\r\nimport IconRight from '../../assets/right.png'\r\n\r\nconst LiveTypes = (props) => {\r\n\r\n  const { liveList,history } = props\r\n\r\n  return (\r\n    <>\r\n      {\r\n        liveList.map((list,i) => {\r\n          return (\r\n            <div key={i} className='liveList'>\r\n              <div className='topBg'></div>\r\n              <div className='listContent'>\r\n                <div className='contentTitle'>\r\n                  <div className='title'>{list.module_info.title}</div>\r\n                  <a href=\"\">\r\n                    <p>进去看看</p>\r\n                    <img src={IconRight} alt=\"\" />\r\n                  </a>\r\n                </div>\r\n                <div className='itemContent'>\r\n                  {\r\n                    list.list.map((item,a) => {\r\n                      return (\r\n                        <div key={a} className='liveItem' onClick={()=>history.push(`/live_room?roomid=${item.roomid}`)}>\r\n                          <div>\r\n                            <img src={item.cover} alt=\"\" />\r\n                          </div>\r\n                          <div className='liveTitle'>{item.title}</div>\r\n                        </div>\r\n                      )\r\n                    })\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default LiveTypes","D:\\react\\bilibili\\src\\components\\Avatar.tsx",[],"D:\\react\\bilibili\\src\\components\\Comments\\index.tsx",[],"D:\\react\\bilibili\\src\\pages\\LiveRoom\\ChatWS.ts",[],"D:\\react\\bilibili\\src\\api\\index.ts",[],"D:\\react\\bilibili\\src\\pages\\LiveRoom\\index.tsx",["162","163","164","165"],"import React, { useEffect, useState } from 'react'\r\nimport * as actionTypes from '../../store/actions';\r\nimport { connect } from \"react-redux\";\r\nimport Logo from \"../../components/Logo\";\r\nimport './style.styl'\r\nimport VideoPlayer from '../../components/VideoPlayer'\r\nimport { getDanmuConfig } from '../../api'\r\nimport ChatWebSocket, { Events } from \"./ChatWS\";\r\nimport ChatList from '../../components/ChatList'\r\n\r\nconst LiveRoom = (props) => {\r\n  const { location, getStreamingDispatch, streaming, streamInfo, getStreamInfoDispatch } = props\r\n  const roomid = location.search.match(/\\d+/)\r\n  const [activeBar, setActiveBar] = useState(0)\r\n   const [chatData, setChatData] = useState({})\r\n  const [danmu, setDanmu] = useState([])\r\n  useEffect(() => {\r\n    getStreamInfoDispatch(roomid)\r\n    getStreamingDispatch(roomid)\r\n  }, [])\r\n  const anchor_info = streamInfo.anchor_info\r\n  const an = Object.assign({}, anchor_info).base_info\r\n  const base_info = Object.assign({}, an)\r\n  const relation_info = Object.assign({}, anchor_info).relation_info\r\n  const room_info = Object.assign({}, streamInfo.room_info)\r\n  const attention = Object.assign({}, relation_info).attention\r\n\r\n\r\n  useEffect(() => {\r\n    getDanmuConfig(roomid).then(res => {\r\n      if (res.data) {\r\n        const url = `wss://${res.data.host_list[2].host}/sub`;\r\n        const chatWebSocket = new ChatWebSocket(url, Number(roomid));\r\n\r\n        chatWebSocket.on(Events.HEARTBEAT_REPLY, ({ onlineNum }) => {\r\n          // onlineNumRef.current.innerHTML = `人气：${formatTenThousand(onlineNum)}`;\r\n        });\r\n\r\n        chatWebSocket.on(Events.MESSAGE_RECEIVE, (data) => {\r\n          //  setChatData(data)\r\n          data.forEach(function (item) {\r\n            if (item.cmd === \"DANMU_MSG\") {\r\n              // const barrage = [\r\n              //   \"#\" + Number(item.info[0][3]).toString(16),\r\n              //    item.info[1]\r\n              // ];\r\n              const arr:any[] = []\r\n              arr.push(item) \r\n              // setChatData(arr) \r\n              setDanmu(arr as any)\r\n              // 发送弹幕\r\n              // videoPlayerRef.current.sendBarrage(barragData);\r\n            }\r\n          });\r\n        });\r\n\r\n      }\r\n    })\r\n\r\n  },[])\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className='roomHeader'>\r\n        <a href=\"/index\" className='logo'>\r\n          <Logo />\r\n        </a>\r\n        <div className='liveType'>\r\n          <span onClick={() => props.history.push('/lives_area')}>直播分类</span>\r\n          <span>{'>'}</span>\r\n          <span>视频聊天</span>\r\n        </div>\r\n      </div>\r\n      <div className='livePlayer'>\r\n        <VideoPlayer isLive={true} playerUrl={streaming} danmu={danmu} />\r\n      </div>\r\n      <div className='liveInfo'>\r\n        <div className='avatar'>\r\n          <img src={base_info.face} alt=\"\" />\r\n        </div>\r\n        <div className='about'>\r\n          <div className='author_name'>主播：{base_info.uname}</div>\r\n          <div className='author_about'>\r\n            <div>人气：{room_info.online}</div>\r\n            <div>粉丝：{attention}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='chatContainer'>\r\n        <div className='chatBar'>\r\n          <div><span className={activeBar === 0 ? 'activeBar' : ''} onClick={() => { setActiveBar(0) }}>互动</span></div>\r\n          <div><span className={activeBar === 0 ? '' : 'activeBar'} onClick={() => { setActiveBar(1) }}>简介</span></div>\r\n        </div>\r\n        {\r\n          activeBar === 0 ? <ChatList chatData={danmu} /> :\r\n            <div className='description'>\r\n              <div dangerouslySetInnerHTML={{ __html: room_info.description }}>\r\n              </div>\r\n            </div>\r\n        }\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  function mapStateToProps(state) {\r\n    return state;\r\n  },\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getStreamingDispatch(props) {\r\n        dispatch(actionTypes.fetchStreaming(props))\r\n      },\r\n      getStreamInfoDispatch(props) {\r\n        dispatch(actionTypes.fetchStreamInfo(props))\r\n      },\r\n\r\n    };\r\n  }\r\n)(LiveRoom);\r\n","D:\\react\\bilibili\\src\\App.tsx",[],["166","167"],"D:\\react\\bilibili\\src\\components\\Logo.tsx",[],"D:\\react\\bilibili\\src\\components\\Recommend\\index.tsx",["168"],"import React, { useEffect } from 'react'\r\nimport './style.styl'\r\n\r\nconst Recommend = (props) => {\r\n  const { recommendList } = props\r\n\r\n  return (\r\n    <div className='recommend_container'>\r\n      {\r\n        recommendList.map(item => {\r\n          return (\r\n          <a key={item.aid} href={`/video?aid=${item.aid}&bvid=${item.bvid}`}  className='recommend_item'>\r\n              <div className='item'>\r\n                <img src={item.pic} alt=\"\" />\r\n\r\n              </div>\r\n              <p className='title'>{item.title}</p>\r\n            </a>\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Recommend","D:\\react\\bilibili\\src\\components\\Header\\index.tsx",[],["169","170"],"D:\\react\\bilibili\\src\\components\\PlayerDetail\\index.tsx",["171"],"import React, { useEffect, useState } from 'react'\r\nimport IconHot from '../../assets/fire.png'\r\nimport './style.styl'\r\nimport IconZan from '../../assets/zan.png'\r\nimport IconStar from '../../assets/star.png'\r\nimport IconDownload from '../../assets/download.png'\r\nimport IconBan from '../../assets/ban.png'\r\nimport classnames from 'classnames'\r\nimport IconArrowDown from '../../assets/arrow_down.png'\r\nimport IconArrowUp from '../../assets/arrow_up.png'\r\nimport { timestampToTime, tenThousand } from '../../util'\r\nimport Comments from '../../components/Comments'\r\n\r\n\r\nconst PlayerDetail = (props) => {\r\n  const { playerDetail, detailRecommend, history,comments } = props\r\n  const author = Object.assign({}, playerDetail.owner)\r\n  const stat= Object.assign({}, playerDetail.stat)\r\n\r\n  const [spread, setSpread] = useState(false)\r\n  const [selectComments, setSelectComments] = useState(false)\r\n\r\n  const toggleSpread = () => {\r\n    if (spread) {\r\n      setSpread(false)\r\n    } else {\r\n      setSpread(true)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n  })\r\n\r\n\r\n  return (\r\n    <div className='detail_container'>\r\n      <div className='player_info'   >\r\n        <div className='top_info'>\r\n          <div className='hot'>\r\n            <img src={IconHot} alt=\"\" />\r\n            <span>热门</span>\r\n          </div>\r\n          <h1 className={classnames(spread ? 'spreadTitle' : 'title')}>{playerDetail.title}</h1>\r\n          <img className={classnames('iconDown', spread ? 'spreadClass' : '')} onClick={toggleSpread} src={IconArrowDown} alt=\"\" />\r\n        </div>\r\n\r\n        {\r\n          spread ? <div className='detail_info'>\r\n            <div className='author'>\r\n              <img className='avatar' src={author.face} alt=\"\" />\r\n              <div>\r\n                <div className='author_name'>{author.name}</div>\r\n                <div className='fans'>60.5万粉丝</div>\r\n              </div>\r\n              <div className='payAttention'>+ 关注</div>\r\n            </div>\r\n            <div className='viewInfo'>\r\n              <span>{tenThousand(playerDetail.stat.view)}观看</span>\r\n              <span>{tenThousand(playerDetail.stat.danmaku)}弹幕</span>\r\n              <span>{timestampToTime(playerDetail.pubdate).substr(0, 10)}</span>\r\n            </div>\r\n            <div className='banInfo'>\r\n              <img src={IconBan} alt=\"\" />\r\n              <span>未经作者授权禁止转载</span>\r\n            </div>\r\n            <div className='authorSay'>{playerDetail.desc}</div>\r\n            <div className='left_info'>\r\n              <div className='tool'>\r\n                <img src={IconZan} alt=\"\" />\r\n                <span>{tenThousand(stat.like)}</span>\r\n              </div>\r\n              <div className='tool'> <img src={IconStar} alt=\"\" />\r\n                <span>{tenThousand(stat.favorite)}</span>\r\n              </div>\r\n              <div className='tool'> <img src={IconDownload} alt=\"\" />\r\n                <span>缓存</span>\r\n              </div>\r\n            </div>\r\n\r\n          </div> :\r\n            <div className='video_tool'>\r\n              <div className='author'>\r\n                <img className='avatar' src={author.face} alt=\"\" />\r\n                <div className='author_name'>{author.name}</div>\r\n              </div>\r\n              <div className='tool'>\r\n                <img src={IconZan} alt=\"\" />\r\n                <span>{tenThousand(stat.like)}</span>\r\n              </div>\r\n              <div className='tool'> <img src={IconStar} alt=\"\" />\r\n                <span>{tenThousand(stat.favorite)}</span>\r\n              </div>\r\n              <div className='tool'> <img src={IconDownload} alt=\"\" />\r\n                <span>缓存</span></div>\r\n            </div>\r\n        }\r\n      </div>\r\n      <div className='recommendList'>\r\n        <div className='listBar'>\r\n          <div onClick={() => setSelectComments(false)}> <span className={selectComments ? '' : 'selected'}>相关推荐</span></div>\r\n          <div onClick={() => setSelectComments(true)}><span className={selectComments ? 'selected' : ''}>评论</span></div>\r\n        </div>\r\n        <div className={classnames('listContainer', selectComments ? 'commentsSelected' : '')} >\r\n          {\r\n            detailRecommend.map((item) => {\r\n              return (\r\n                <div key={item.aid} className='listItem' onClick={() => history.push(`/space?mid=${item.owner.mid}`)}>\r\n                  <div>\r\n                    <img src={item.pic} alt=\"\" />\r\n                  </div>\r\n                  <div>{item.title}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n        {\r\n          selectComments? <Comments comments={comments} /> : null\r\n        } \r\n      </div>\r\n     \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default PlayerDetail","D:\\react\\bilibili\\src\\api\\axios.ts",[],"D:\\react\\bilibili\\src\\components\\ChatList\\index.tsx",[],"D:\\react\\bilibili\\src\\pages\\Live\\index.tsx",["172","173"],"D:\\react\\bilibili\\src\\pages\\My\\index.tsx",[],"D:\\react\\bilibili\\src\\store\\actions.ts",[],"D:\\react\\bilibili\\src\\components\\MenuBar\\index.tsx",["174","175"],"import React, { useEffect, useState, useRef } from 'react'\r\n\r\n\r\nimport './style.styl'\r\n\r\nimport IconArrowDown from '../../assets/arrow_down.png'\r\nimport IconArrowUp from '../../assets/arrow_up.png'\r\nimport classNames from 'classnames'\r\n\r\n\r\nconst menuList = [\r\n  { \"tid\": 0, \"typename\": \"首页\" },\r\n  { \"tid\": 1, \"typename\": \"动画\" },\r\n  { \"tid\": 13, \"typename\": \"番剧\" },\r\n  { \"tid\": 168, \"typename\": \"国创\" },\r\n  { \"tid\": 3, \"typename\": \"音乐\" },\r\n  { \"tid\": 129, \"typename\": \"舞蹈\" },\r\n  { \"tid\": 4, \"typename\": \"游戏\" }, {\r\n    \"tid\": 36, \"typename\": \"科技\"\r\n  },\r\n  { \"tid\": 188, \"typename\": \"数码\" },\r\n  { \"tid\": 160, \"typename\": \"生活\" },\r\n  { \"tid\": 119, \"typename\": \"鬼畜\" },\r\n  { \"tid\": 155, \"typename\": \"时尚\" },\r\n  { \"tid\": 5, \"typename\": \"娱乐\" },\r\n  { \"tid\": 181, \"typename\": \"影视\" },\r\n  { \"tid\": 177, \"typename\": \"纪录片\" },\r\n  { \"tid\": 23, \"typename\": \"电影\" },\r\n  // { \"tid\": 11, \"typename\": \"电视剧\" },\r\n  { \"tid\": 999, \"typename\": \"直播\" }\r\n]\r\n\r\n\r\n\r\nconst MenuBar = (props) => {\r\n  const { typeList, history, chooseId, fetchData } = props\r\n  const [chooseBar, setChooseBar] = useState(0)\r\n\r\n  const barRef = useRef(null)\r\n\r\n  console.log(typeList)\r\n  const [showBox, setShowBox] = useState(false)\r\n\r\n\r\n  useEffect(() => {\r\n    setChooseBar(chooseId)\r\n  }, [chooseId])\r\n\r\n  const selectRegion = (e) => {\r\n    if (e === 0) {\r\n      history.push('/index')\r\n    } else {\r\n      if (e === 999) {\r\n        history.push('/lives')\r\n      } else {\r\n        if (fetchData !== undefined) {\r\n          fetchData(true)\r\n        }\r\n        history.push(`/channel?tid=${e}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='bar_container'>\r\n\r\n      <div className='menu_bar'>\r\n        <div className='menu' ref={barRef}>\r\n          {menuList.map(item => (\r\n            <div key={item.tid}\r\n              className={classNames(chooseBar === item.tid ? 'activeMenu' : '')}\r\n              onClick={selectRegion.bind(this, item.tid)}>\r\n              {item.typename}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className='arrow'>\r\n          <img src={IconArrowDown} onClick={() => setShowBox(true)} />\r\n        </div>\r\n      </div>\r\n      <div className={classNames('wrapper', showBox ? 'showWrapper' : '')}>\r\n        <div className='wrapper_box'>\r\n          {menuList.map(item => (\r\n            <div key={item.tid}\r\n              className={classNames(chooseBar === item.tid ? 'activeMenu' : '')}\r\n              onClick={selectRegion.bind(this, item.tid)}\r\n            >\r\n              {item.typename}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <img className='icon_up' src={IconArrowUp} onClick={() => setShowBox(false)} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default MenuBar","D:\\react\\bilibili\\src\\util\\index.ts",["176","177","178","179","180","181","182"],"//时间戳转换日期\r\n\r\nexport function timestampToTime(timestamp) {\r\n  var date = new Date(timestamp * 1000);//时间戳为10位需*1000，时间戳为13位的话不需乘1000\r\n  var Y = date.getFullYear() + '-';\r\n  var M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\r\n  var D = date.getDate() + ' ';\r\n  var h = date.getHours() + ':';\r\n  var m = date.getMinutes() + ':';\r\n  var s = date.getSeconds();\r\n  return Y + M + D + h + m + s;\r\n}\r\n\r\n//数值取万\r\n\r\nexport function tenThousand(props) {\r\n  if (props > 1000) {\r\n    return (props / 10000).toFixed(1) + '万'\r\n  } else {\r\n    return props\r\n  }\r\n}\r\n\r\n//10进制颜色转rgba\r\n\r\nexport function getColor(number) {\r\n  const alpha = number >> 24 & 0xff;\r\n  const red = number >> 16 & 0xff;\r\n  const green = number >> 8 & 0xff;\r\n  const blue = number & 0xff;\r\n  return `rgba(${red}, ${green}, ${blue}, ${alpha})`;\r\n}\r\n\r\n// 防抖函数\r\nexport const debounce = (func, delay) => {\r\n  let timer\r\n  return (...args) => {\r\n    if (timer) {\r\n      clearTimeout(timer)\r\n    }\r\n    timer = setTimeout(() => {\r\n      func.apply(this, args)\r\n    }, delay)\r\n  }\r\n}\r\n\r\n// 节流函数\r\nexport const throttle = (func, delay) => {\r\n  let now = Date.now()\r\n  return (...args) => {\r\n    const current = Date.now()\r\n    if (current - now >= delay) {\r\n      func.apply(this, args)\r\n      now = current\r\n    }\r\n  }\r\n}\r\n\r\n\r\n//颜文字\r\n\r\nexport const wordTransform = (s) => {\r\n  const arr = []\r\n  const reg = /\\[.+?\\]/g\r\n  const msg = s.message\r\n  let key =reg.exec(msg)\r\n  if(key){\r\n    let url = s.emote[key[0]].url\r\n    return  msg.replace(reg,()=>{\r\n      return `<img  alt=\"\"  src='${url}' />`\r\n    })\r\n  }else{\r\n    return s.message\r\n  }\r\n  \r\n}","D:\\react\\bilibili\\src\\pages\\Video\\index.tsx",["183"],"import React, { useEffect, useState } from 'react'\r\nimport Header from '../../components/Header'\r\nimport VideoPlayer from '../../components/VideoPlayer'\r\nimport './style.styl'\r\nimport { connect } from \"react-redux\"\r\nimport * as actionTypes from '../../store/actions'\r\nimport PlayerDetail from '../../components/PlayerDetail'\r\nimport Comments from '../../components/Comments'\r\n\r\nconst Video = (props) => {\r\n  const { location, playerUrl,\r\n    getPlayUrlDispatch, getPlayDetailDispatch,\r\n    getDetailRecommendDispatch, playerDetail,\r\n    detailRecommend, danmu, getDanmuDispatch,\r\n    getCommentsDispatch,comments\r\n  } = props\r\n  const aid = location.search.match(/\\d+/)\r\n  const bvid = location.search.match(/([A-Z])\\w+/g)\r\n  const [showPic, setShowPic] = useState(true)\r\n\r\n  useEffect(() => {\r\n    getPlayDetailDispatch([aid, bvid])\r\n    getDetailRecommendDispatch(aid)\r\n    getCommentsDispatch(aid)\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (playerDetail !== '') {\r\n      getPlayUrlDispatch([playerDetail.aid, playerDetail.cid])\r\n      getDanmuDispatch(playerDetail.cid)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [playerDetail])\r\n\r\n  const closePic = (props) => {\r\n    setShowPic(!props)\r\n  }\r\n\r\n  return (\r\n    <div className='videoHome'>\r\n      <Header />\r\n      <div className='videoContent'>\r\n        {\r\n          showPic ? <img className='videoPic' src={playerDetail.pic} alt=\"\" /> : null\r\n        }\r\n        <VideoPlayer playerUrl={playerUrl} closePic={closePic} danmu={danmu} />\r\n      </div>\r\n      <div className='detailVideoList'>\r\n        <PlayerDetail comments={comments} playerDetail={playerDetail} detailRecommend={detailRecommend} history={props.history} />\r\n      </div>\r\n \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  function mapStateToProps(state) {\r\n    return state;\r\n  },\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getPlayUrlDispatch(props) {\r\n        dispatch(actionTypes.getPlayer(props))\r\n      },\r\n      getPlayDetailDispatch(props) {\r\n        dispatch(actionTypes.fetchPlayerDetail(props))\r\n      },\r\n      getDetailRecommendDispatch(props) {\r\n        dispatch(actionTypes.fetchDetailRecommend(props))\r\n      },\r\n      getDanmuDispatch(props) {\r\n        dispatch(actionTypes.fetchDanmu(props))\r\n      },\r\n      getCommentsDispatch(props) {\r\n        dispatch(actionTypes.fetchComments(props))\r\n      },\r\n    };\r\n  }\r\n)(Video);\r\n","D:\\react\\bilibili\\src\\components\\ChannelList\\index.tsx",["184"],"import React from 'react'\r\nimport './style.styl'\r\nimport IconRight from '../../assets/arrow_right.png'\r\nimport IconRank from '../../assets/icon_rank.png'\r\n\r\n\r\nconst ChannelList = (props) => {\r\n  const { region,history } = props\r\n\r\n  return (\r\n    <div className='channelList'>\r\n      <div className='listContent'>\r\n        <div className='contentTitle'>\r\n          <div className='title'>热门推荐</div>\r\n          <a href=\"\">\r\n            <img src={IconRank} alt=\"\" />\r\n            <p>排行榜</p>\r\n            <img src={IconRight} alt=\"\" />\r\n          </a>\r\n        </div>\r\n        <div className='itemContent'>\r\n          {\r\n            region.map((item, a) => {\r\n              return (\r\n                <div key={a} className='liveItem' onClick={() => {history.push(`/video?aid=${item.aid}&bvid=${item.bvid}`)}}>\r\n                  <div>\r\n                    <img src={item.pic} alt=\"\" />\r\n                  </div>\r\n                  <div className='liveTitle'>{item.title}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default ChannelList\r\n",{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"185","replacedBy":"189"},{"ruleId":"187","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":19,"column":6,"nodeType":"193","endLine":19,"endColumn":8,"suggestions":"194"},{"ruleId":"195","severity":1,"message":"196","line":6,"column":8,"nodeType":"197","messageId":"198","endLine":6,"endColumn":19},{"ruleId":"191","severity":1,"message":"199","line":15,"column":5,"nodeType":"193","endLine":15,"endColumn":7,"suggestions":"200"},{"ruleId":"195","severity":1,"message":"201","line":10,"column":8,"nodeType":"197","messageId":"198","endLine":10,"endColumn":16},{"ruleId":"191","severity":1,"message":"202","line":19,"column":6,"nodeType":"193","endLine":19,"endColumn":8,"suggestions":"203"},{"ruleId":"185","replacedBy":"204"},{"ruleId":"187","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":34,"column":19,"nodeType":"208","endLine":34,"endColumn":70},{"ruleId":"195","severity":1,"message":"209","line":3,"column":8,"nodeType":"197","messageId":"198","endLine":3,"endColumn":19},{"ruleId":"195","severity":1,"message":"210","line":10,"column":8,"nodeType":"197","messageId":"198","endLine":10,"endColumn":14},{"ruleId":"195","severity":1,"message":"211","line":11,"column":20,"nodeType":"197","messageId":"198","endLine":11,"endColumn":28},{"ruleId":"195","severity":1,"message":"212","line":12,"column":10,"nodeType":"197","messageId":"198","endLine":12,"endColumn":25},{"ruleId":"195","severity":1,"message":"213","line":25,"column":10,"nodeType":"197","messageId":"198","endLine":25,"endColumn":22},{"ruleId":"195","severity":1,"message":"214","line":25,"column":24,"nodeType":"197","messageId":"198","endLine":25,"endColumn":39},{"ruleId":"195","severity":1,"message":"215","line":31,"column":9,"nodeType":"197","messageId":"198","endLine":31,"endColumn":24},{"ruleId":"191","severity":1,"message":"216","line":39,"column":22,"nodeType":"217","endLine":50,"endColumn":15},{"ruleId":"195","severity":1,"message":"218","line":47,"column":11,"nodeType":"197","messageId":"198","endLine":47,"endColumn":16},{"ruleId":"191","severity":1,"message":"219","line":47,"column":20,"nodeType":"220","endLine":47,"endColumn":21},{"ruleId":"191","severity":1,"message":"221","line":153,"column":6,"nodeType":"193","endLine":153,"endColumn":17,"suggestions":"222"},{"ruleId":"223","severity":1,"message":"224","line":19,"column":19,"nodeType":"208","endLine":19,"endColumn":30},{"ruleId":"195","severity":1,"message":"225","line":15,"column":11,"nodeType":"197","messageId":"198","endLine":15,"endColumn":19},{"ruleId":"195","severity":1,"message":"226","line":15,"column":21,"nodeType":"197","messageId":"198","endLine":15,"endColumn":32},{"ruleId":"191","severity":1,"message":"227","line":20,"column":6,"nodeType":"193","endLine":20,"endColumn":8,"suggestions":"228"},{"ruleId":"191","severity":1,"message":"229","line":60,"column":5,"nodeType":"193","endLine":60,"endColumn":7,"suggestions":"230"},{"ruleId":"185","replacedBy":"231"},{"ruleId":"187","replacedBy":"232"},{"ruleId":"195","severity":1,"message":"233","line":1,"column":17,"nodeType":"197","messageId":"198","endLine":1,"endColumn":26},{"ruleId":"185","replacedBy":"234"},{"ruleId":"187","replacedBy":"235"},{"ruleId":"195","severity":1,"message":"236","line":10,"column":8,"nodeType":"197","messageId":"198","endLine":10,"endColumn":19},{"ruleId":"195","severity":1,"message":"237","line":1,"column":28,"nodeType":"197","messageId":"198","endLine":1,"endColumn":36},{"ruleId":"191","severity":1,"message":"238","line":20,"column":6,"nodeType":"193","endLine":20,"endColumn":8,"suggestions":"239"},{"ruleId":"206","severity":1,"message":"207","line":78,"column":11,"nodeType":"208","endLine":78,"endColumn":71},{"ruleId":"206","severity":1,"message":"207","line":92,"column":9,"nodeType":"208","endLine":92,"endColumn":88},{"ruleId":"240","severity":1,"message":"241","line":27,"column":24,"nodeType":"242","messageId":"243","endLine":27,"endColumn":26},{"ruleId":"240","severity":1,"message":"241","line":27,"column":30,"nodeType":"242","messageId":"243","endLine":27,"endColumn":31},{"ruleId":"240","severity":1,"message":"241","line":28,"column":22,"nodeType":"242","messageId":"243","endLine":28,"endColumn":24},{"ruleId":"240","severity":1,"message":"241","line":28,"column":28,"nodeType":"242","messageId":"243","endLine":28,"endColumn":29},{"ruleId":"240","severity":1,"message":"241","line":29,"column":24,"nodeType":"242","messageId":"243","endLine":29,"endColumn":26},{"ruleId":"240","severity":1,"message":"241","line":29,"column":29,"nodeType":"242","messageId":"243","endLine":29,"endColumn":30},{"ruleId":"195","severity":1,"message":"244","line":63,"column":9,"nodeType":"197","messageId":"198","endLine":63,"endColumn":12},{"ruleId":"195","severity":1,"message":"245","line":8,"column":8,"nodeType":"197","messageId":"198","endLine":8,"endColumn":16},{"ruleId":"223","severity":1,"message":"224","line":15,"column":11,"nodeType":"208","endLine":15,"endColumn":22},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],["246"],["247"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'banners', 'getBannerListDispatch', 'getRecommendListDispatch', and 'recommendList.length'. Either include them or remove the dependency array.","ArrayExpression",["248"],"@typescript-eslint/no-unused-vars","'tenThousand' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getUpInfoDispatch' and 'mid'. Either include them or remove the dependency array.",["249"],"'ChatList' is defined but never used.","React Hook useEffect has missing dependencies: 'getRegionDispatch' and 'rid'. Either include them or remove the dependency array.",["250"],["246"],["247"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ReactPlayer' is defined but never used.","'BarDot' is defined but never used.","'throttle' is defined but never used.","'setPlayerDetail' is defined but never used.","'showControls' is assigned a value but never used.","'setShowControls' is assigned a value but never used.","'MAX_DANMU_COUNT' is assigned a value but never used.","Assignments to the 'barrageTimer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'start' is assigned a value but never used.","Assignments to the 'start' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has missing dependencies: 'initVideo' and 'isLive'. Either include them or remove the dependency array.",["251"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'chatData' is assigned a value but never used.","'setChatData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getStreamInfoDispatch', 'getStreamingDispatch', and 'roomid'. Either include them or remove the dependency array.",["252"],"React Hook useEffect has a missing dependency: 'roomid'. Either include it or remove the dependency array.",["253"],["246"],["247"],"'useEffect' is defined but never used.",["246"],["247"],"'IconArrowUp' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'getLiveListDispatch' and 'liveList.length'. Either include them or remove the dependency array.",["254"],"no-mixed-operators","Unexpected mix of '>>' and '&'.","BinaryExpression","unexpectedMixedOperator","'arr' is assigned a value but never used.","'Comments' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},"Update the dependencies array to be: [banners, getBannerListDispatch, getRecommendListDispatch, recommendList.length]",{"range":"269","text":"270"},"Update the dependencies array to be: [getUpInfoDispatch, mid]",{"range":"271","text":"272"},"Update the dependencies array to be: [getRegionDispatch, rid]",{"range":"273","text":"274"},"Update the dependencies array to be: [initVideo, isLive, playerUrl]",{"range":"275","text":"276"},"Update the dependencies array to be: [getStreamInfoDispatch, getStreamingDispatch, roomid]",{"range":"277","text":"278"},"Update the dependencies array to be: [roomid]",{"range":"279","text":"280"},"Update the dependencies array to be: [getLiveListDispatch, liveList.length]",{"range":"281","text":"282"},[638,640],"[banners, getBannerListDispatch, getRecommendListDispatch, recommendList.length]",[487,489],"[getUpInfoDispatch, mid]",[582,584],"[getRegionDispatch, rid]",[4590,4601],"[initVideo, isLive, playerUrl]",[825,827],"[getStreamInfoDispatch, getStreamingDispatch, roomid]",[2200,2202],"[roomid]",[502,504],"[getLiveListDispatch, liveList.length]"]