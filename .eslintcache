[{"D:\\react\\bilibili\\src\\index.tsx":"1","D:\\react\\bilibili\\src\\pages\\Search\\index.tsx":"2","D:\\react\\bilibili\\src\\store\\index.ts":"3","D:\\react\\bilibili\\src\\pages\\Index\\index.tsx":"4","D:\\react\\bilibili\\src\\pages\\Space\\index.tsx":"5","D:\\react\\bilibili\\src\\pages\\Channel\\index.tsx":"6","D:\\react\\bilibili\\src\\pages\\LivesArea\\index.tsx":"7","D:\\react\\bilibili\\src\\store\\reducers.ts":"8","D:\\react\\bilibili\\src\\components\\Swiper\\index.tsx":"9","D:\\react\\bilibili\\src\\components\\VideoPlayer\\index.tsx":"10","D:\\react\\bilibili\\src\\components\\LiveTypes\\index.tsx":"11","D:\\react\\bilibili\\src\\components\\Avatar.tsx":"12","D:\\react\\bilibili\\src\\components\\Comments\\index.tsx":"13","D:\\react\\bilibili\\src\\pages\\LiveRoom\\ChatWS.ts":"14","D:\\react\\bilibili\\src\\api\\index.ts":"15","D:\\react\\bilibili\\src\\pages\\LiveRoom\\index.tsx":"16","D:\\react\\bilibili\\src\\App.tsx":"17","D:\\react\\bilibili\\src\\components\\Logo.tsx":"18","D:\\react\\bilibili\\src\\components\\Recommend\\index.tsx":"19","D:\\react\\bilibili\\src\\components\\Header\\index.tsx":"20","D:\\react\\bilibili\\src\\components\\PlayerDetail\\index.tsx":"21","D:\\react\\bilibili\\src\\api\\axios.ts":"22","D:\\react\\bilibili\\src\\components\\ChatList\\index.tsx":"23","D:\\react\\bilibili\\src\\pages\\Live\\index.tsx":"24","D:\\react\\bilibili\\src\\pages\\My\\index.tsx":"25","D:\\react\\bilibili\\src\\store\\actions.ts":"26","D:\\react\\bilibili\\src\\components\\MenuBar\\index.tsx":"27","D:\\react\\bilibili\\src\\util\\index.ts":"28","D:\\react\\bilibili\\src\\pages\\Video\\index.tsx":"29"},{"size":221,"mtime":1609244241164,"results":"30","hashOfConfig":"31"},{"size":3278,"mtime":1609434376479,"results":"32","hashOfConfig":"31"},{"size":256,"mtime":1609325772460,"results":"33","hashOfConfig":"31"},{"size":1355,"mtime":1609669964118,"results":"34","hashOfConfig":"31"},{"size":2529,"mtime":1609576230514,"results":"35","hashOfConfig":"31"},{"size":1342,"mtime":1609752770174,"results":"36","hashOfConfig":"31"},{"size":1597,"mtime":1609590847825,"results":"37","hashOfConfig":"31"},{"size":3551,"mtime":1609771123044,"results":"38","hashOfConfig":"31"},{"size":1219,"mtime":1609937798701,"results":"39","hashOfConfig":"31"},{"size":8656,"mtime":1609939069642,"results":"40","hashOfConfig":"31"},{"size":1410,"mtime":1609587250475,"results":"41","hashOfConfig":"31"},{"size":1978,"mtime":1609690833486,"results":"42","hashOfConfig":"31"},{"size":1152,"mtime":1609779764377,"results":"43","hashOfConfig":"31"},{"size":7550,"mtime":1609854452958,"results":"44","hashOfConfig":"31"},{"size":1759,"mtime":1609848112012,"results":"45","hashOfConfig":"31"},{"size":4133,"mtime":1609930521120,"results":"46","hashOfConfig":"31"},{"size":1304,"mtime":1609580608338,"results":"47","hashOfConfig":"31"},{"size":7774,"mtime":1609247415108,"results":"48","hashOfConfig":"31"},{"size":627,"mtime":1609841967902,"results":"49","hashOfConfig":"31"},{"size":669,"mtime":1609565612204,"results":"50","hashOfConfig":"31"},{"size":4767,"mtime":1609773965756,"results":"51","hashOfConfig":"31"},{"size":746,"mtime":1609592456696,"results":"52","hashOfConfig":"31"},{"size":1395,"mtime":1609939257166,"results":"53","hashOfConfig":"31"},{"size":1194,"mtime":1609500183678,"results":"54","hashOfConfig":"31"},{"size":2064,"mtime":1609483345357,"results":"55","hashOfConfig":"31"},{"size":5711,"mtime":1609771616780,"results":"56","hashOfConfig":"31"},{"size":2770,"mtime":1609587215987,"results":"57","hashOfConfig":"31"},{"size":1729,"mtime":1609833575145,"results":"58","hashOfConfig":"31"},{"size":2418,"mtime":1609773175471,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"x6upha",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"62"},"D:\\react\\bilibili\\src\\index.tsx",[],["136","137"],"D:\\react\\bilibili\\src\\pages\\Search\\index.tsx",[],["138","139"],"D:\\react\\bilibili\\src\\store\\index.ts",[],["140","141"],"D:\\react\\bilibili\\src\\pages\\Index\\index.tsx",["142"],"import React, { useEffect} from 'react'\r\nimport * as actionTypes from '../../store/actions';\r\nimport Header from '../../components/Header'\r\nimport Swiper from '../../components/Swiper/index'\r\nimport './style.styl'\r\nimport { connect } from \"react-redux\";\r\nimport Recommend from '../../components/Recommend'\r\nimport MenuBar from '../../components/MenuBar'\r\n\r\nconst Index = (props) => {\r\n  const { getBannerListDispatch, banners, recommendList, getRecommendListDispatch } = props\r\n  useEffect(() => {\r\n    if (!banners.length) {\r\n      getBannerListDispatch()\r\n    }\r\n    if (!recommendList.length) {\r\n      getRecommendListDispatch()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className='container'>\r\n      <Header />\r\n      <MenuBar  history={props.history} chooseId={0} />\r\n      <div className='swiper_container'>\r\n        <Swiper bannerList={banners} />\r\n      </div>\r\n      <div className='recommend'>\r\n        <Recommend recommendList={recommendList}   />\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default connect(\r\n  function mapStateToProps(state) {\r\n    return state;\r\n  },\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getBannerListDispatch() {\r\n        dispatch(actionTypes.getBannerList())\r\n      },\r\n      getRecommendListDispatch() {\r\n        dispatch(actionTypes.getRecommendList())\r\n      },\r\n    };\r\n  }\r\n)(Index);\r\n",["143","144"],"D:\\react\\bilibili\\src\\pages\\Space\\index.tsx",["145","146"],"import React, { useEffect, useState } from 'react'\r\nimport Header from '../../components/Header'\r\nimport './style.styl'\r\nimport * as actionTypes from '../../store/actions';\r\nimport { connect } from \"react-redux\";\r\nimport{tenThousand} from '../../util'\r\n\r\nconst Space = (props) => {\r\n  const {upInfo,getUpInfoDispatch} = props\r\n  const [choiceVideo, setChoiceVideo] = useState(false)\r\n  const mid = props.location.search.match(/\\d+/)\r\n\r\n  useEffect(()=>{\r\n    getUpInfoDispatch(mid)\r\n  },[])\r\n\r\n  return (\r\n    <div className='container'>\r\n      <Header />\r\n      <div>\r\n        <div className='banner'>\r\n          <img src=\"http://s1.hdslb.com/bfs/static/jinkela/mstation-h5/assets/bannerTop_new.png\" alt=\"\" />\r\n        </div>\r\n        <div className='userInfo'>\r\n          <img src={upInfo.face} alt=\"\" />\r\n          <div className='fansInfo'>\r\n            <div className='fans'>\r\n              <div className='item'>\r\n                <div className='number'>666</div>\r\n                <div className='type'>粉丝</div>\r\n              </div>\r\n              <div className='columLine'></div>\r\n              <div className='item'>\r\n                <div className='number'>35</div>\r\n                <div className='type'>关注</div>\r\n              </div>\r\n              <div className='columLine'></div>\r\n              <div className='item'>\r\n                <div className='number'>4532</div>\r\n                <div className='type'>获赞</div>\r\n              </div>\r\n            </div>\r\n            <div className='editInfo'>编辑资料</div>\r\n          </div>\r\n        </div>\r\n        <div className='username'>\r\n          {upInfo.name}\r\n        </div>\r\n        <div className='userAbout'>{upInfo.sign}</div>\r\n        <div className='tabBar'>\r\n          <div> <span className={choiceVideo ? ' ' : 'active'} onClick={()=>setChoiceVideo(false)}>动态</span></div>\r\n          <div><span className={choiceVideo ? 'active' : ''} onClick={()=>setChoiceVideo(true)}>视频</span></div>\r\n        </div>\r\n        <div className='content'>\r\n            <img src=\"http://s1.hdslb.com/bfs/static/jinkela/mstation-h5/assets/noContent.png\" alt=\"\"/>\r\n            <div className='sleep'>小哔睡着了~</div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(\r\n  function mapStateToProps(state) {\r\n    return state;\r\n  },\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getUpInfoDispatch(props) {\r\n        dispatch(actionTypes.fetchUpInfo(props))\r\n      },\r\n     \r\n    };\r\n  }\r\n)(Space);\r\n",["147","148"],"D:\\react\\bilibili\\src\\pages\\Channel\\index.tsx",["149","150"],"import React, { useEffect } from 'react'\r\nimport * as actionTypes from '../../store/actions';\r\nimport Header from '../../components/Header'\r\n\r\nimport './style.styl'\r\nimport { connect } from \"react-redux\";\r\n\r\nimport MenuBar from '../../components/MenuBar'\r\n\r\nconst Channel = (props) => {\r\n  const { location, region, getRegionDispatch,history } = props\r\n  const rid = location.search.match(/\\d+/)\r\n\r\n  useEffect(() => {\r\n    console.log(321)\r\n    getRegionDispatch(rid)\r\n  }, [])\r\n\r\nconst fetchData = (props) =>{\r\n  console.log(props)\r\n  getRegionDispatch(rid)\r\n}\r\n\r\n  return (\r\n    <div className='container'>\r\n      <Header  />\r\n      <MenuBar history={history}  chooseId={Number(rid)} fetchData={fetchData} />\r\n      {/* <div className='channelContainer'>\r\n        <div className='channelBar'>\r\n        <div className='channelMenu'>\r\n          {region.map(item => (\r\n            <div key={item.aid}\r\n          >\r\n              {item.typename}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        </div>\r\n        <div></div>\r\n      </div> */}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default connect(\r\n  function mapStateToProps(state) {\r\n    return state;\r\n  },\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getRegionDispatch(props) {\r\n        dispatch(actionTypes.fetchRegion(props))\r\n      },\r\n    };\r\n  }\r\n)(Channel);\r\n",["151","152"],"D:\\react\\bilibili\\src\\pages\\LivesArea\\index.tsx",[],"D:\\react\\bilibili\\src\\store\\reducers.ts",[],"D:\\react\\bilibili\\src\\components\\Swiper\\index.tsx",["153"],"D:\\react\\bilibili\\src\\components\\VideoPlayer\\index.tsx",["154","155","156","157","158","159","160","161","162","163","164"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport './style.styl'\r\nimport ReactPlayer from 'react-player'\r\nimport * as Hls from \"hls.js\";\r\nimport IconPlay from '../../assets/tv-play.png'\r\nimport IconPause from '../../assets/tv-pause.png'\r\nimport IconBarrageOn from '../../assets/barrage-on.png'\r\nimport IconBarrageOff from '../../assets/barrage-off.png'\r\nimport IconFullScreen from '../../assets/fullscreen.png'\r\nimport BarDot from '../../components/BarDot'\r\nimport { debounce, throttle } from '../../util'\r\nimport { setPlayerDetail } from '../../store/actions';\r\n\r\n\r\nconst VideoPlayer = (props) => {\r\n\r\n  const { playerUrl, isLive, closePic, danmu } = props\r\n  const videoRef = useRef(null)\r\n  const danmuRef = useRef(null)\r\n  const controlRef = useRef(null)\r\n  const bottomControlRef = useRef(null)\r\n  const barRef = useRef(null)\r\n  const dotRef = useRef(null)\r\n  const [playing, setPlaying] = useState(false)\r\n  const [showControls, setShowControls] = useState(false)\r\n  const [barrageOn, setBarrageOn] = useState(false)\r\n  let barrageTimer\r\n\r\n  const domPool: any[] = []\r\n  let danmuPool: any[] = []\r\n  const MAX_DANMU_COUNT = 6\r\n  let start = 0\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (barrageOn && playing) {\r\n      init()\r\n      barrageTimer = setInterval(() => {\r\n        if (domPool.length) {\r\n          let dom = domPool.shift()\r\n          danmuPool.shift()\r\n          console.log('im send', domPool, dom);\r\n          sendDanmu(dom)\r\n        } else {\r\n          console.log('again')\r\n          start += 6\r\n          init()\r\n        }\r\n      }, 1000)\r\n    }\r\n    return () => clearInterval(barrageTimer)\r\n\r\n  }, [barrageOn, playing, domPool])\r\n\r\n\r\n\r\n  const init = () => {\r\n    console.log(danmu, 889)\r\n    let dom = document.querySelectorAll('.danmu')\r\n    if (dom.length) {\r\n      for (let i = 0; i < dom.length; i++) {\r\n        dom[i].addEventListener('transitionend', () => {\r\n          dom[i].remove()\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!isLive) {\r\n      const indexs: any[] = []\r\n      danmu.forEach((item, i) => {\r\n        if (parseInt(item.time, 10) === parseInt((videoRef as any).current.currentTime, 10)) {\r\n          danmuPool.push(item)\r\n          indexs.push(i)\r\n        }\r\n      })\r\n      indexs.forEach((index, i) => {\r\n        danmu.splice(index - i, 1)\r\n      })\r\n    } else {\r\n      danmuPool = danmu\r\n      console.log(danmuPool, 121121, danmu)\r\n    }\r\n    if (danmuPool.length ) {\r\n      console.log(56511111111111111111111)\r\n      for (let i = 0; i < danmuPool.length; i++) {\r\n        let div = document.createElement('div')\r\n        div.className = 'danmu'\r\n        isLive ? div.innerHTML = danmuPool[0].info[1] : div.innerHTML = danmuPool[i].content;\r\n        isLive ? div.style.color = \"#\" + Number(danmuPool[0].info[0][3]).toString(16) : div.style.color = \"#\" + Number(danmuPool[i].decimalColor).toString(16)\r\n        div.style.position = 'absolute'\r\n        div.style.top = `${Math.random() * 30}vw`\r\n        div.style.marginLeft = '100vw'\r\n        div.style.overflow = 'hidden'\r\n        div.style.whiteSpace = 'nowrap'\r\n        div.style.width = 'mint-width';\r\n        (danmuRef as any).current.append(div);\r\n        domPool.push(div)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  const toggleSend = (e) => {\r\n    e.stopPropagation()\r\n    if (barrageOn) {\r\n      setBarrageOn(false)\r\n    } else {\r\n      setBarrageOn(true)\r\n    }\r\n  }\r\n\r\n  const sendDanmu = (dom) => {\r\n    const x = dom.offsetLeft + dom.clientWidth\r\n    dom.style.transform = `translateX(${-x}px)`\r\n    if (isLive) {\r\n      dom.style.transition = `all 5s linear`\r\n    } else {\r\n      dom.style.transition = `all ${Math.round(1500 / x)}s linear`\r\n    }\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    (bottomControlRef as any).current.style.display = 'none'\r\n    if (isLive && playerUrl.length) {\r\n      const videoDom = videoRef.current\r\n      const videoSrc = playerUrl[3].url\r\n      if ((videoDom as any).canPlayType('application/vnd.apple.mpegurl')) {\r\n        (videoDom as any).src = videoSrc;\r\n      } else if ((Hls as any).isSupported()) {\r\n        var hls = new (Hls as any)();\r\n        hls.loadSource(videoSrc);\r\n        hls.attachMedia(videoDom);\r\n\r\n        (videoDom as any).addEventListener('canplay', () => {\r\n          (videoDom as any).play()\r\n          setPlaying(true)\r\n          // setTimeout(() => {\r\n          //   (controlRef as any).current.style.display = 'none'\r\n          // }, 3000)\r\n        })\r\n\r\n      }\r\n    } else if (playerUrl.length) {\r\n      initVideo()\r\n    }\r\n\r\n    // return()=>  (videoRef as any).current.removeEventListener('timeupdate')\r\n  }, [playerUrl])\r\n\r\n\r\n\r\n  const initVideo = () => {\r\n    const bar = barRef.current;\r\n    const dot = dotRef.current;\r\n    const video = videoRef.current;\r\n    (videoRef as any).current.addEventListener('timeupdate', () => {\r\n      const progress = ((videoRef as any).current.currentTime * 1000) / playerUrl.length * 100;\r\n      (bar as any).style.width = `${progress}%`;\r\n      (dot as any).style.marginLeft = `${progress / 2.22}vw`;\r\n\r\n    });\r\n\r\n    /**\r\n      * 进度条事件\r\n      */\r\n    // 总进度条宽度\r\n    let width = 0;\r\n    // 距离屏幕左边距离\r\n    let left = 0;\r\n    // 拖拽进度比例\r\n    let rate = 0;\r\n    (dotRef as any).current.addEventListener('touchstart', (e) => {\r\n      e.stopPropagation()\r\n      const parentDOM = (dot as any).parentElement;\r\n      width = parentDOM.offsetWidth;\r\n      left = parentDOM.getBoundingClientRect().left;\r\n      (video as any).pause()\r\n    });\r\n\r\n\r\n    (video as any).addEventListener('ended', () => {\r\n      (video as any).currentTime = 0;\r\n      (video as any).pause();\r\n      setPlaying(false)\r\n    });\r\n\r\n    (dotRef as any).current.addEventListener('touchmove', (e) => {\r\n      e.preventDefault()\r\n      const touch = e.touches[0];\r\n      // 计算拖拽进度比例\r\n      rate = (touch.clientX - left) / width;\r\n      if (rate > 1) {\r\n        rate = 1;\r\n      } else if (rate < 0) {\r\n        rate = 0;\r\n      }\r\n      // const currentTime = (video as any).duration * rate;\r\n      (dot as any).style.marginLeft = `${rate * 100}%`;\r\n      (bar as any).style.width = `${rate * 100}%`;\r\n    });\r\n    (dotRef as any).current.addEventListener(\"touchend\", () => {\r\n      (video as any).currentTime = (video as any).duration * rate;\r\n\r\n      (video as any).play()\r\n    });\r\n\r\n  }\r\n\r\n  const changePlay = (e) => {\r\n    e.stopPropagation();\r\n    const videoDom = videoRef.current;\r\n\r\n    if (playing) {\r\n      setPlaying(false);\r\n      (videoDom as any).pause();\r\n\r\n    } else {\r\n      (bottomControlRef as any).current.style.display = 'block';\r\n      if (!isLive) {\r\n        closePic(true)\r\n      }\r\n      setTimeout(() => {\r\n        (controlRef as any).current.style.display = 'none'\r\n      }, 5000)\r\n      setPlaying(true);\r\n      (videoDom as any).play()\r\n    }\r\n  }\r\n\r\n  let timer\r\n\r\n  const toggleShowControls = () => {\r\n    clearTimeout(timer)\r\n    if ((controlRef as any).current.style.display === 'none') {\r\n      (controlRef as any).current.style.display = 'block'\r\n      // timer = setTimeout(() => {\r\n      //   if (playing) {\r\n      //     (controlRef as any).current.style.display = 'none'\r\n      //   }\r\n      // }, 5000)\r\n    } else {\r\n      (controlRef as any).current.style.display = 'none'\r\n    }\r\n  }\r\n\r\n  // useEffect(() => {\r\n\r\n  //   return () => clearTimeout(timer)\r\n  // }, [playing])\r\n\r\n  return (\r\n    <div className='video_wrapper' >\r\n      <div className='videoContainer' onClick={debounce(toggleShowControls, 200)}>\r\n        <div className='danmuContainer' ref={danmuRef}></div>\r\n        <video\r\n          src={isLive ? '' : playerUrl.url}\r\n          ref={videoRef} height=\"100%\" width=\"100%\" preload=\"auto\"\r\n          x5-playsinline=\"true\"\r\n          webkit-playsinline=\"true\"\r\n        />\r\n        <div className='control' ref={controlRef}>\r\n          <img className='control-play' src={playing ? IconPause : IconPlay} onClick={changePlay} alt=\"\" />\r\n          <div className='bottom-control' ref={bottomControlRef} >\r\n\r\n            {\r\n              isLive ? null :\r\n                <div className='barContainer' >\r\n                  <div className='barDot' ref={dotRef}  >\r\n                  </div>\r\n                  <div className='allBar'>\r\n                    <div className='activeBar' ref={barRef}></div>\r\n                  </div>\r\n                </div>\r\n            }\r\n\r\n            <img onClick={toggleSend} className='icon-barrage' src={barrageOn ? IconBarrageOn : IconBarrageOff} alt=\"\" />\r\n            <img className='icon-fullscreen' src={IconFullScreen} alt=\"\" />\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default VideoPlayer","D:\\react\\bilibili\\src\\components\\LiveTypes\\index.tsx",["165"],"import React from 'react'\r\nimport './style.styl'\r\nimport IconRight from '../../assets/right.png'\r\n\r\nconst LiveTypes = (props) => {\r\n\r\n  const { liveList,history } = props\r\n\r\n  return (\r\n    <>\r\n      {\r\n        liveList.map((list,i) => {\r\n          return (\r\n            <div key={i} className='liveList'>\r\n              <div className='topBg'></div>\r\n              <div className='listContent'>\r\n                <div className='contentTitle'>\r\n                  <div className='title'>{list.module_info.title}</div>\r\n                  <a href=\"\">\r\n                    <p>进去看看</p>\r\n                    <img src={IconRight} alt=\"\" />\r\n                  </a>\r\n                </div>\r\n                <div className='itemContent'>\r\n                  {\r\n                    list.list.map((item,a) => {\r\n                      return (\r\n                        <div key={a} className='liveItem' onClick={()=>history.push(`/live_room?roomid=${item.roomid}`)}>\r\n                          <div>\r\n                            <img src={item.cover} alt=\"\" />\r\n                          </div>\r\n                          <div className='liveTitle'>{item.title}</div>\r\n                        </div>\r\n                      )\r\n                    })\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default LiveTypes","D:\\react\\bilibili\\src\\components\\Avatar.tsx",[],"D:\\react\\bilibili\\src\\components\\Comments\\index.tsx",[],"D:\\react\\bilibili\\src\\pages\\LiveRoom\\ChatWS.ts",[],"D:\\react\\bilibili\\src\\api\\index.ts",[],"D:\\react\\bilibili\\src\\pages\\LiveRoom\\index.tsx",["166","167","168","169"],"import React, { useEffect, useState } from 'react'\r\nimport * as actionTypes from '../../store/actions';\r\nimport { connect } from \"react-redux\";\r\nimport Logo from \"../../components/Logo\";\r\nimport './style.styl'\r\nimport VideoPlayer from '../../components/VideoPlayer'\r\nimport { getDanmuConfig } from '../../api'\r\nimport ChatWebSocket, { Events } from \"./ChatWS\";\r\nimport ChatList from '../../components/ChatList'\r\n\r\nconst LiveRoom = (props) => {\r\n  const { location, getStreamingDispatch, streaming, streamInfo, getStreamInfoDispatch } = props\r\n  const roomid = location.search.match(/\\d+/)\r\n  const [activeBar, setActiveBar] = useState(0)\r\n   const [chatData, setChatData] = useState({})\r\n  const [danmu, setDanmu] = useState([])\r\n  useEffect(() => {\r\n    getStreamInfoDispatch(roomid)\r\n    getStreamingDispatch(roomid)\r\n  }, [])\r\n  const anchor_info = streamInfo.anchor_info\r\n  const an = Object.assign({}, anchor_info).base_info\r\n  const base_info = Object.assign({}, an)\r\n  const relation_info = Object.assign({}, anchor_info).relation_info\r\n  const room_info = Object.assign({}, streamInfo.room_info)\r\n  const attention = Object.assign({}, relation_info).attention\r\n\r\n\r\n  useEffect(() => {\r\n    getDanmuConfig(roomid).then(res => {\r\n      if (res.data) {\r\n        const url = `wss://${res.data.host_list[2].host}/sub`;\r\n        const chatWebSocket = new ChatWebSocket(url, Number(roomid));\r\n\r\n        chatWebSocket.on(Events.HEARTBEAT_REPLY, ({ onlineNum }) => {\r\n          // onlineNumRef.current.innerHTML = `人气：${formatTenThousand(onlineNum)}`;\r\n        });\r\n\r\n        chatWebSocket.on(Events.MESSAGE_RECEIVE, (data) => {\r\n          //  setChatData(data)\r\n          data.forEach(function (item) {\r\n            if (item.cmd === \"DANMU_MSG\") {\r\n              // const barrage = [\r\n              //   \"#\" + Number(item.info[0][3]).toString(16),\r\n              //    item.info[1]\r\n              // ];\r\n              const arr:any[] = []\r\n              arr.push(item) \r\n              // setChatData(arr) \r\n              setDanmu(arr as any)\r\n              // 发送弹幕\r\n              // videoPlayerRef.current.sendBarrage(barragData);\r\n            }\r\n          });\r\n        });\r\n\r\n      }\r\n    })\r\n\r\n  },[])\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className='roomHeader'>\r\n        <a href=\"/index\" className='logo'>\r\n          <Logo />\r\n        </a>\r\n        <div className='liveType'>\r\n          <span onClick={() => props.history.push('/lives_area')}>直播分类</span>\r\n          <span>{'>'}</span>\r\n          <span>视频聊天</span>\r\n        </div>\r\n      </div>\r\n      <div className='livePlayer'>\r\n        <VideoPlayer isLive={true} playerUrl={streaming} danmu={danmu} />\r\n      </div>\r\n      <div className='liveInfo'>\r\n        <div className='avatar'>\r\n          <img src={base_info.face} alt=\"\" />\r\n        </div>\r\n        <div className='about'>\r\n          <div className='author_name'>主播：{base_info.uname}</div>\r\n          <div className='author_about'>\r\n            <div>人气：{room_info.online}</div>\r\n            <div>粉丝：{attention}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='chatContainer'>\r\n        <div className='chatBar'>\r\n          <div><span className={activeBar === 0 ? 'activeBar' : ''} onClick={() => { setActiveBar(0) }}>互动</span></div>\r\n          <div><span className={activeBar === 0 ? '' : 'activeBar'} onClick={() => { setActiveBar(1) }}>简介</span></div>\r\n        </div>\r\n        {\r\n          activeBar === 0 ? <ChatList chatData={danmu} /> :\r\n            <div className='description'>\r\n              <div dangerouslySetInnerHTML={{ __html: room_info.description }}>\r\n              </div>\r\n            </div>\r\n        }\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  function mapStateToProps(state) {\r\n    return state;\r\n  },\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getStreamingDispatch(props) {\r\n        dispatch(actionTypes.fetchStreaming(props))\r\n      },\r\n      getStreamInfoDispatch(props) {\r\n        dispatch(actionTypes.fetchStreamInfo(props))\r\n      },\r\n\r\n    };\r\n  }\r\n)(LiveRoom);\r\n","D:\\react\\bilibili\\src\\App.tsx",[],["170","171"],"D:\\react\\bilibili\\src\\components\\Logo.tsx",[],"D:\\react\\bilibili\\src\\components\\Recommend\\index.tsx",["172"],"import React, { useEffect } from 'react'\r\nimport './style.styl'\r\n\r\nconst Recommend = (props) => {\r\n  const { recommendList } = props\r\n\r\n  return (\r\n    <div className='recommend_container'>\r\n      {\r\n        recommendList.map(item => {\r\n          return (\r\n          <a key={item.aid} href={`/video?aid=${item.aid}&bvid=${item.bvid}`}  className='recommend_item'>\r\n              <div className='item'>\r\n                <img src={item.pic} alt=\"\" />\r\n\r\n              </div>\r\n              <p className='title'>{item.title}</p>\r\n            </a>\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Recommend",["173","174"],"D:\\react\\bilibili\\src\\components\\Header\\index.tsx",[],"D:\\react\\bilibili\\src\\components\\PlayerDetail\\index.tsx",["175"],"import React, { useEffect, useState } from 'react'\r\nimport IconHot from '../../assets/fire.png'\r\nimport './style.styl'\r\nimport IconZan from '../../assets/zan.png'\r\nimport IconStar from '../../assets/star.png'\r\nimport IconDownload from '../../assets/download.png'\r\nimport IconBan from '../../assets/ban.png'\r\nimport classnames from 'classnames'\r\nimport IconArrowDown from '../../assets/arrow_down.png'\r\nimport IconArrowUp from '../../assets/arrow_up.png'\r\nimport { timestampToTime, tenThousand } from '../../util'\r\nimport Comments from '../../components/Comments'\r\n\r\n\r\nconst PlayerDetail = (props) => {\r\n  const { playerDetail, detailRecommend, history,comments } = props\r\n  const author = Object.assign({}, playerDetail.owner)\r\n  const stat= Object.assign({}, playerDetail.stat)\r\n\r\n  const [spread, setSpread] = useState(false)\r\n  const [selectComments, setSelectComments] = useState(false)\r\n\r\n  const toggleSpread = () => {\r\n    if (spread) {\r\n      setSpread(false)\r\n    } else {\r\n      setSpread(true)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n  })\r\n\r\n\r\n  return (\r\n    <div className='detail_container'>\r\n      <div className='player_info'   >\r\n        <div className='top_info'>\r\n          <div className='hot'>\r\n            <img src={IconHot} alt=\"\" />\r\n            <span>热门</span>\r\n          </div>\r\n          <h1 className={classnames(spread ? 'spreadTitle' : 'title')}>{playerDetail.title}</h1>\r\n          <img className={classnames('iconDown', spread ? 'spreadClass' : '')} onClick={toggleSpread} src={IconArrowDown} alt=\"\" />\r\n        </div>\r\n\r\n        {\r\n          spread ? <div className='detail_info'>\r\n            <div className='author'>\r\n              <img className='avatar' src={author.face} alt=\"\" />\r\n              <div>\r\n                <div className='author_name'>{author.name}</div>\r\n                <div className='fans'>60.5万粉丝</div>\r\n              </div>\r\n              <div className='payAttention'>+ 关注</div>\r\n            </div>\r\n            <div className='viewInfo'>\r\n              <span>{tenThousand(playerDetail.stat.view)}观看</span>\r\n              <span>{tenThousand(playerDetail.stat.danmaku)}弹幕</span>\r\n              <span>{timestampToTime(playerDetail.pubdate).substr(0, 10)}</span>\r\n            </div>\r\n            <div className='banInfo'>\r\n              <img src={IconBan} alt=\"\" />\r\n              <span>未经作者授权禁止转载</span>\r\n            </div>\r\n            <div className='authorSay'>{playerDetail.desc}</div>\r\n            <div className='left_info'>\r\n              <div className='tool'>\r\n                <img src={IconZan} alt=\"\" />\r\n                <span>{tenThousand(stat.like)}</span>\r\n              </div>\r\n              <div className='tool'> <img src={IconStar} alt=\"\" />\r\n                <span>{tenThousand(stat.favorite)}</span>\r\n              </div>\r\n              <div className='tool'> <img src={IconDownload} alt=\"\" />\r\n                <span>缓存</span>\r\n              </div>\r\n            </div>\r\n\r\n          </div> :\r\n            <div className='video_tool'>\r\n              <div className='author'>\r\n                <img className='avatar' src={author.face} alt=\"\" />\r\n                <div className='author_name'>{author.name}</div>\r\n              </div>\r\n              <div className='tool'>\r\n                <img src={IconZan} alt=\"\" />\r\n                <span>{tenThousand(stat.like)}</span>\r\n              </div>\r\n              <div className='tool'> <img src={IconStar} alt=\"\" />\r\n                <span>{tenThousand(stat.favorite)}</span>\r\n              </div>\r\n              <div className='tool'> <img src={IconDownload} alt=\"\" />\r\n                <span>缓存</span></div>\r\n            </div>\r\n        }\r\n      </div>\r\n      <div className='recommendList'>\r\n        <div className='listBar'>\r\n          <div onClick={() => setSelectComments(false)}> <span className={selectComments ? '' : 'selected'}>相关推荐</span></div>\r\n          <div onClick={() => setSelectComments(true)}><span className={selectComments ? 'selected' : ''}>评论</span></div>\r\n        </div>\r\n        <div className={classnames('listContainer', selectComments ? 'commentsSelected' : '')} >\r\n          {\r\n            detailRecommend.map((item) => {\r\n              return (\r\n                <div key={item.aid} className='listItem' onClick={() => history.push(`/space?mid=${item.owner.mid}`)}>\r\n                  <div>\r\n                    <img src={item.pic} alt=\"\" />\r\n                  </div>\r\n                  <div>{item.title}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n        {\r\n          selectComments? <Comments comments={comments} /> : null\r\n        } \r\n      </div>\r\n     \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default PlayerDetail","D:\\react\\bilibili\\src\\api\\axios.ts",[],["176","177"],"D:\\react\\bilibili\\src\\components\\ChatList\\index.tsx",["178"],"D:\\react\\bilibili\\src\\pages\\Live\\index.tsx",["179","180"],"D:\\react\\bilibili\\src\\pages\\My\\index.tsx",[],"D:\\react\\bilibili\\src\\store\\actions.ts",[],"D:\\react\\bilibili\\src\\components\\MenuBar\\index.tsx",["181","182"],"D:\\react\\bilibili\\src\\util\\index.ts",["183","184","185","186","187","188","189"],"D:\\react\\bilibili\\src\\pages\\Video\\index.tsx",["190"],"import React, { useEffect, useState } from 'react'\r\nimport Header from '../../components/Header'\r\nimport VideoPlayer from '../../components/VideoPlayer'\r\nimport './style.styl'\r\nimport { connect } from \"react-redux\"\r\nimport * as actionTypes from '../../store/actions'\r\nimport PlayerDetail from '../../components/PlayerDetail'\r\nimport Comments from '../../components/Comments'\r\n\r\nconst Video = (props) => {\r\n  const { location, playerUrl,\r\n    getPlayUrlDispatch, getPlayDetailDispatch,\r\n    getDetailRecommendDispatch, playerDetail,\r\n    detailRecommend, danmu, getDanmuDispatch,\r\n    getCommentsDispatch,comments\r\n  } = props\r\n  const aid = location.search.match(/\\d+/)\r\n  const bvid = location.search.match(/([A-Z])\\w+/g)\r\n  const [showPic, setShowPic] = useState(true)\r\n\r\n  useEffect(() => {\r\n    getPlayDetailDispatch([aid, bvid])\r\n    getDetailRecommendDispatch(aid)\r\n    getCommentsDispatch(aid)\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (playerDetail !== '') {\r\n      getPlayUrlDispatch([playerDetail.aid, playerDetail.cid])\r\n      getDanmuDispatch(playerDetail.cid)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [playerDetail])\r\n\r\n  const closePic = (props) => {\r\n    setShowPic(!props)\r\n  }\r\n\r\n  return (\r\n    <div className='videoHome'>\r\n      <Header />\r\n      <div className='videoContent'>\r\n        {\r\n          showPic ? <img className='videoPic' src={playerDetail.pic} alt=\"\" /> : null\r\n        }\r\n        <VideoPlayer playerUrl={playerUrl} closePic={closePic} danmu={danmu} />\r\n      </div>\r\n      <div className='detailVideoList'>\r\n        <PlayerDetail comments={comments} playerDetail={playerDetail} detailRecommend={detailRecommend} history={props.history} />\r\n      </div>\r\n \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  function mapStateToProps(state) {\r\n    return state;\r\n  },\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getPlayUrlDispatch(props) {\r\n        dispatch(actionTypes.getPlayer(props))\r\n      },\r\n      getPlayDetailDispatch(props) {\r\n        dispatch(actionTypes.fetchPlayerDetail(props))\r\n      },\r\n      getDetailRecommendDispatch(props) {\r\n        dispatch(actionTypes.fetchDetailRecommend(props))\r\n      },\r\n      getDanmuDispatch(props) {\r\n        dispatch(actionTypes.fetchDanmu(props))\r\n      },\r\n      getCommentsDispatch(props) {\r\n        dispatch(actionTypes.fetchComments(props))\r\n      },\r\n    };\r\n  }\r\n)(Video);\r\n",{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"191","replacedBy":"195"},{"ruleId":"193","replacedBy":"196"},{"ruleId":"191","replacedBy":"197"},{"ruleId":"193","replacedBy":"198"},{"ruleId":"199","severity":1,"message":"200","line":19,"column":6,"nodeType":"201","endLine":19,"endColumn":8,"suggestions":"202"},{"ruleId":"191","replacedBy":"203"},{"ruleId":"193","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":6,"column":8,"nodeType":"207","messageId":"208","endLine":6,"endColumn":19},{"ruleId":"199","severity":1,"message":"209","line":15,"column":5,"nodeType":"201","endLine":15,"endColumn":7,"suggestions":"210"},{"ruleId":"191","replacedBy":"211"},{"ruleId":"193","replacedBy":"212"},{"ruleId":"205","severity":1,"message":"213","line":11,"column":21,"nodeType":"207","messageId":"208","endLine":11,"endColumn":27},{"ruleId":"199","severity":1,"message":"214","line":17,"column":6,"nodeType":"201","endLine":17,"endColumn":8,"suggestions":"215"},{"ruleId":"191","replacedBy":"216"},{"ruleId":"193","replacedBy":"217"},{"ruleId":"218","severity":1,"message":"219","line":34,"column":19,"nodeType":"220","endLine":34,"endColumn":70},{"ruleId":"205","severity":1,"message":"221","line":3,"column":8,"nodeType":"207","messageId":"208","endLine":3,"endColumn":19},{"ruleId":"205","severity":1,"message":"222","line":10,"column":8,"nodeType":"207","messageId":"208","endLine":10,"endColumn":14},{"ruleId":"205","severity":1,"message":"223","line":11,"column":20,"nodeType":"207","messageId":"208","endLine":11,"endColumn":28},{"ruleId":"205","severity":1,"message":"224","line":12,"column":10,"nodeType":"207","messageId":"208","endLine":12,"endColumn":25},{"ruleId":"205","severity":1,"message":"225","line":25,"column":10,"nodeType":"207","messageId":"208","endLine":25,"endColumn":22},{"ruleId":"205","severity":1,"message":"226","line":25,"column":24,"nodeType":"207","messageId":"208","endLine":25,"endColumn":39},{"ruleId":"205","severity":1,"message":"227","line":31,"column":9,"nodeType":"207","messageId":"208","endLine":31,"endColumn":24},{"ruleId":"199","severity":1,"message":"228","line":39,"column":22,"nodeType":"229","endLine":50,"endColumn":15},{"ruleId":"205","severity":1,"message":"230","line":47,"column":11,"nodeType":"207","messageId":"208","endLine":47,"endColumn":16},{"ruleId":"199","severity":1,"message":"231","line":47,"column":20,"nodeType":"232","endLine":47,"endColumn":21},{"ruleId":"199","severity":1,"message":"233","line":153,"column":6,"nodeType":"201","endLine":153,"endColumn":17,"suggestions":"234"},{"ruleId":"235","severity":1,"message":"236","line":19,"column":19,"nodeType":"220","endLine":19,"endColumn":30},{"ruleId":"205","severity":1,"message":"237","line":15,"column":11,"nodeType":"207","messageId":"208","endLine":15,"endColumn":19},{"ruleId":"205","severity":1,"message":"238","line":15,"column":21,"nodeType":"207","messageId":"208","endLine":15,"endColumn":32},{"ruleId":"199","severity":1,"message":"239","line":20,"column":6,"nodeType":"201","endLine":20,"endColumn":8,"suggestions":"240"},{"ruleId":"199","severity":1,"message":"241","line":60,"column":5,"nodeType":"201","endLine":60,"endColumn":7,"suggestions":"242"},{"ruleId":"191","replacedBy":"243"},{"ruleId":"193","replacedBy":"244"},{"ruleId":"205","severity":1,"message":"245","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":26},{"ruleId":"191","replacedBy":"246"},{"ruleId":"193","replacedBy":"247"},{"ruleId":"205","severity":1,"message":"248","line":10,"column":8,"nodeType":"207","messageId":"208","endLine":10,"endColumn":19},{"ruleId":"191","replacedBy":"249"},{"ruleId":"193","replacedBy":"250"},{"ruleId":"205","severity":1,"message":"251","line":31,"column":11,"nodeType":"207","messageId":"208","endLine":31,"endColumn":21},{"ruleId":"205","severity":1,"message":"252","line":1,"column":28,"nodeType":"207","messageId":"208","endLine":1,"endColumn":36},{"ruleId":"199","severity":1,"message":"253","line":20,"column":6,"nodeType":"201","endLine":20,"endColumn":8,"suggestions":"254"},{"ruleId":"218","severity":1,"message":"219","line":78,"column":11,"nodeType":"220","endLine":78,"endColumn":71},{"ruleId":"218","severity":1,"message":"219","line":92,"column":9,"nodeType":"220","endLine":92,"endColumn":88},{"ruleId":"255","severity":1,"message":"256","line":27,"column":24,"nodeType":"257","messageId":"258","endLine":27,"endColumn":26},{"ruleId":"255","severity":1,"message":"256","line":27,"column":30,"nodeType":"257","messageId":"258","endLine":27,"endColumn":31},{"ruleId":"255","severity":1,"message":"256","line":28,"column":22,"nodeType":"257","messageId":"258","endLine":28,"endColumn":24},{"ruleId":"255","severity":1,"message":"256","line":28,"column":28,"nodeType":"257","messageId":"258","endLine":28,"endColumn":29},{"ruleId":"255","severity":1,"message":"256","line":29,"column":24,"nodeType":"257","messageId":"258","endLine":29,"endColumn":26},{"ruleId":"255","severity":1,"message":"256","line":29,"column":29,"nodeType":"257","messageId":"258","endLine":29,"endColumn":30},{"ruleId":"205","severity":1,"message":"259","line":63,"column":9,"nodeType":"207","messageId":"208","endLine":63,"endColumn":12},{"ruleId":"205","severity":1,"message":"260","line":8,"column":8,"nodeType":"207","messageId":"208","endLine":8,"endColumn":16},"no-native-reassign",["261"],"no-negated-in-lhs",["262"],["261"],["262"],["261"],["262"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'banners.length', 'getBannerListDispatch', 'getRecommendListDispatch', and 'recommendList.length'. Either include them or remove the dependency array.","ArrayExpression",["263"],["261"],["262"],"@typescript-eslint/no-unused-vars","'tenThousand' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getUpInfoDispatch' and 'mid'. Either include them or remove the dependency array.",["264"],["261"],["262"],"'region' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getRegionDispatch' and 'rid'. Either include them or remove the dependency array.",["265"],["261"],["262"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ReactPlayer' is defined but never used.","'BarDot' is defined but never used.","'throttle' is defined but never used.","'setPlayerDetail' is defined but never used.","'showControls' is assigned a value but never used.","'setShowControls' is assigned a value but never used.","'MAX_DANMU_COUNT' is assigned a value but never used.","Assignments to the 'barrageTimer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'start' is assigned a value but never used.","Assignments to the 'start' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has missing dependencies: 'initVideo' and 'isLive'. Either include them or remove the dependency array.",["266"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'chatData' is assigned a value but never used.","'setChatData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getStreamInfoDispatch', 'getStreamingDispatch', and 'roomid'. Either include them or remove the dependency array.",["267"],"React Hook useEffect has a missing dependency: 'roomid'. Either include it or remove the dependency array.",["268"],["261"],["262"],"'useEffect' is defined but never used.",["261"],["262"],"'IconArrowUp' is defined but never used.",["261"],["262"],"'needScorll' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'getLiveListDispatch' and 'liveList.length'. Either include them or remove the dependency array.",["269"],"no-mixed-operators","Unexpected mix of '>>' and '&'.","BinaryExpression","unexpectedMixedOperator","'arr' is assigned a value but never used.","'Comments' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},"Update the dependencies array to be: [banners.length, getBannerListDispatch, getRecommendListDispatch, recommendList.length]",{"range":"284","text":"285"},"Update the dependencies array to be: [getUpInfoDispatch, mid]",{"range":"286","text":"287"},"Update the dependencies array to be: [getRegionDispatch, rid]",{"range":"288","text":"289"},"Update the dependencies array to be: [initVideo, isLive, playerUrl]",{"range":"290","text":"291"},"Update the dependencies array to be: [getStreamInfoDispatch, getStreamingDispatch, roomid]",{"range":"292","text":"293"},"Update the dependencies array to be: [roomid]",{"range":"294","text":"295"},"Update the dependencies array to be: [getLiveListDispatch, liveList.length]",{"range":"296","text":"297"},[645,647],"[banners.length, getBannerListDispatch, getRecommendListDispatch, recommendList.length]",[487,489],"[getUpInfoDispatch, mid]",[475,477],"[getRegionDispatch, rid]",[4576,4587],"[initVideo, isLive, playerUrl]",[825,827],"[getStreamInfoDispatch, getStreamingDispatch, roomid]",[2200,2202],"[roomid]",[502,504],"[getLiveListDispatch, liveList.length]"]